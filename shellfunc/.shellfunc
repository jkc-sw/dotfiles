#!/bin/bash

# Declare function to add path
# https://unix.stackexchange.com/questions/14895/duplicate-entries-in-path-a-problem
# Answer from: Gilles
# answered Jun 13 '11 at 8:34
addThisPath() {
    case ":$PATH:" in
    *":$1:"*) :;; # already there
    *) PATH="$1:$PATH";; # or PATH="$PATH:$1"
    esac
}

BOLD_TEXT='\e[1m'
YELLO_BOLD_TEXT='\e[1;93m'
GREEN_BOLD_TEXT='\e[1;92m'
BLUE_BOLD_TEXT='\e[1;96m'
RED_BOLD_TEXT='\e[1;91m'
PLAIN='\e[0m'
echobold() {
    echo -e "${BOLD_TEXT}$1${PLAIN}"
}
echosubcommand() {
    echo -e "${BLUE_BOLD_TEXT}$1${PLAIN}"
}
echodebug() {
    echo -e "${BOLD_TEXT}DEBUG${PLAIN}: $*"
}
echoinfo() {
    echo -e "${BOLD_TEXT}INFO${PLAIN}: $*"
}
echoerror() {
    echo -e "${RED_BOLD_TEXT}ERROR${PLAIN}: $*" >&2
}
echosuccess() {
    echo -e "${GREEN_BOLD_TEXT}SUCCESS${PLAIN}: $*"
}
echowarning() {
    echo -e "${YELLO_BOLD_TEXT}WARNING${PLAIN}: $*"
}

# # Awesome stuff from https://unix.stackexchange.com/a/351658
# if [ -n "$BASH" ]; then
#     LINUX_ALIAS_PATH=${BASH_SOURCE}
# elif [ -n "$ZSH_NAME" ]; then
#     LINUX_ALIAS_PATH=${(%):-%x}
# fi
# if [ -z "$LINUX_ALIAS_PATH" ]; then
#     echo "Cannod find LINUX_ALIAS_PATH in the env var"
# fi
# export LINUX_ALIAS_DIR="${LINUX_ALIAS_PATH%/*}"

# Timezone
export TZ='America/Los_Angeles'

export PASSWORD_STORE_DIR="$HOME/repos/mypasswordstore"

# addThisPath "$HOME/.cargo/bin"
# addThisPath "$HOME/.local/bin"
# addThisPath "/usr/local/sbin"
# addThisPath "/usr/sbin"
# addThisPath "/opt/TurboVNC/bin"
# addThisPath "$HOME/.local/p4v/bin"

# some configuration to shell
export TERM=tmux-256color
export EDITOR=nvim
export LANG=en_US.UTF-8

# To have xmonad and matlab play nicely
export _JAVA_AWT_WM_NONREPARENTING=1

# To be save
alias rm='rm -I'

# if command -v /usr/bin/curl &>/dev/null; then
#     alias curl=/usr/bin/curl
# fi

# Use something better
if command -v eza &>/dev/null; then
    alias dir='eza'
fi

# For my personal note
eo() {
    args=()
    if [[ $# -eq 1 ]]; then
        args+=(-NoteDate "$1")
    fi
    pwsh -NoExit -Command "eo ${args[@]}"
}
u() {
    args=()
    if [[ $# -eq 1 ]]; then
        args+=(-NoteDate "$1")
    fi
    pwsh -NoExit -Command "u ${args[@]}"
}
e() {
    args=()
    if [[ $# -eq 1 ]]; then
        args+=(-NoteDate "$1")
    fi
    pwsh -NoExit -Command "e"
}

# Getting brew
if [[ -x "/home/linuxbrew/.linuxbrew/bin/brew" ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# Getting nix-env
if [[ -r "$HOME/.nix-profile/etc/profile.d/nix.sh" ]]; then
    . "$HOME/.nix-profile/etc/profile.d/nix.sh"
    alias ni=nix-env
fi

# Need to source conda
pomo() {
    conda activate "$HOME/miniconda3/envs/dev_env_ansible"
    pomodoro "$@"
}

# Add the tmux command to start the tmux session
rt() (
    if ! (tmux ls | grep -q blah); then
        pushd "$HOME/repos/dev-env-ansible"
        ./rr.sh tmux
        popd
    else
        tmux_attach 'blah' '' "$1"
    fi
)

alias ag=lazygit
alias ai=yazi

note_cb() {
    local name="$1"
    local jdir='/home/chenkua/repos/journal'
    tmux rename-window -t "$name:1" note
    tmux send-keys -t "$name:note" "exec pwsh -NoLogo -NoExit -Login -WorkingDirectory '$jdir'" Enter

}
note() {
    local jdir='/home/chenkua/repos/journal'
    if [[ ! -d "$jdir" ]]; then
        echo "ERR (note): cannot switch to '$jdir' directory" >&2
        echo 'ERR (note): Press any key to close this session.' >&2
        read
        return 1
    fi
    cd "$jdir"
    tmux_attach 'note' 'note_cb' ''
}

_in_asus() {
    local out=''
    if command -v ip &>/dev/null; then
        out="$(ip -br a)"
    elif command -v ifconfig &>/dev/null; then
        out="$(ifconfig)"
    fi
    if [[ -n "$out" && -n "$ASUS_IP" && "$out" == *"$ASUS_IP"* ]]; then
        return 0
    fi
    return 1
}

en() {
    if _in_asus; then
        note
        return 0
    fi
    if [[ -z "$ASUS_IP" ]]; then
        echo 'ERR (jfssh): Cannot locate env var: ASUS_IP' >&2
        return 1
    fi
    if [[ -z "$ASUS_USER" ]]; then
        echo 'ERR (jfssh): Cannot locate env var: ASUS_USER' >&2
        return 1
    fi
    local cmd="\". /home/chenkua/.zshrc ; note\""
    local sshargs=("${ASUS_USER}@${ASUS_IP}" zsh -c "$cmd")

    if tty -s; then
        sshargs=(-t "${sshargs[@]}")
    fi
    ssh "${sshargs[@]}"
}

if tty -s; then
    GPG_TTY="$(tty)"
    export GPG_TTY
fi

# @brief Run the tmux routine
# @param name - tmux name
# @param cb - callback to configure the tmux session at creation time
# @param label - The label to start alternative client
tmux_attach() {
    local name="$1"
    local cb="$2"
    local label="$3"

    if [[ -z "$name" ]]; then
        echowarning "Nothing to be done"
        return 1
    fi

    if [[ -n "$name" && -z "$label" ]]; then
        if [[ "$(tmux ls -F '#{session_name}')" != *"$name"* ]]; then
            tmux new-session -s "$name" -d

            # if there is callback, run it
            if command -v "$cb" &>/dev/null; then
                "$cb" "$name"
            fi

            if [[ -n "$TMUX" ]]; then
                tmux switch-client -t "$name"
            else
                tmux attach-session -t "$name"
            fi
        else
            if [[ -n "$TMUX" ]]; then
                tmux switch-client -t "$name"
            else
                tmux attach-session -t "$name"
            fi
        fi
        return 0
    fi

    # no label, nothing to be done further
    if [[ -z "$label" ]]; then
        return 0
    fi

    # store the name
    newname="$name-$label"

    # check if the session exists
    if [[ "$(tmux ls -F '#{session_name}')" != *"$newname"* ]]; then
        tmux new-session -t "$name" -s "$newname" -d
        tmux attach-session -t "$newname"
        return 0
    fi

    # attach to the session
    if [[ -n "$TMUX" ]]; then
        tmux switch-client -t "$newname"
    else
        tmux attach-session -t "$newname"
    fi
}

# Quickly start the session
aoeu () {
    tmux_attach aoeu '' "$1"
}

# configuration to rg and fd
# export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"
if command -v fd >/dev/null 2>&1; then
    export FZF_DEFAULT_COMMAND='fd --follow --hidden --type file'
    export FZF_ALT_C_COMMAND="fd --follow --hidden --type directory"
elif command -v fdfind >/dev/null 2>&1; then
    export FZF_DEFAULT_COMMAND='fdfind --follow --hidden --type file'
    export FZF_ALT_C_COMMAND="fdfind --follow --hidden --type directory"
    alias fd=fdfind
fi
export FZF_DEFAULT_OPTS="--color=dark --height=50%"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Redefine this function to change the options
_fzf_git_fzf() {
  fzf-tmux -p80%,60% -- \
    --layout=reverse --multi --height=70% --min-height=20 --border \
    --border-label-pos=2 \
    --color='header:italic:underline,label:blue' \
    --preview-window='bottom,50%,border-top' \
    --bind='ctrl-/:change-preview-window(down,50%,border-top|hidden|)' "$@"
}

# Allow us to bypass
bypass_starship() {
    # If we want to bypass, we use a temp dir in /tmp/bypass-starship
    mkdir -p /tmp/bypass-starship
}

# Allow us to restore
restore_starship() {
    # If we want to bypass, we use a temp dir in /tmp/bypass-starship
    [[ -d '/tmp/bypass-starship' ]] && rm -fd /tmp/bypass-starship
}

# handle shell specific
add_shell_specific() {
    forshell="$(ps --no-headers -o comm -p $$)"
    # forshell="$1"
    if [[ ! -d '/tmp/bypass-starship' ]]; then
        eval "$(starship init "$forshell")"
    else
        echowarning "starship is bypassed in startup. Restore with \`restore_starship\`"
    fi
    eval "$(zoxide init --cmd 'c' "$forshell")"

    # Handle the fzf
    eval "$(fzf "--$forshell")"
}
# add_shell_specific

# @brief Source the environment
nv() {
    # Setup the dev env
    sdev

    # if test -d "$HOME/miniconda3/envs/dev_env_ansible2"; then
    #     conda activate "$HOME/miniconda3/envs/dev_env_ansible2"
    # fi

    # if test -d "$HOME/miniconda3/envs/dev_env_ansible"; then
    #     conda activate --stack "$HOME/miniconda3/envs/dev_env_ansible"
    # fi

    if test -n "$TMUX"; then
        # Get current panes
        beforepanenum="$(tmux list-panes | wc -l)"

        # run the tswitch
        tswitch

        # Get after panes
        afterpanenum="$(tmux list-panes | wc -l)"

        # Send the source command only when creating new pane
        if test "$afterpanenum" -eq 2 -a "$beforepanenum" -eq 1; then
            tmux send-keys -t :.+ 'nv' Enter
        fi
    fi
}

# shortcut to start nvim
n() {
    nv

    if command -v nvim >/dev/null 2>&1; then
        nvim "$@"
    fi
}
nt() {
    nv
    local nvimFound=false
    if command -v nvim >/dev/null 2>&1; then
        nvimFound=true
    fi
    local sessionFound=false
    if [[ -r ./Session.vim ]]; then
        sessionFound=true
    fi
    if [[ "$nvimFound" == 'true' && "$sessionFound" == 'true' ]]; then
        nvim -S ./Session.vim "$@"
    elif [[ "$nvimFound" == 'true' ]]; then
        nvim "$@"
    else
        echo "WARN: nvim not in the PATH"
    fi
}

# Change keyboard layout
AOE() {
    doas localectl set-x11-keymap us '' '' us
}
ASD() {
    doas localectl set-x11-keymap us '' '' dvorak
}

# shortcut to start nvim with host being a tmux
nvt() {
    TOCLIP_HOST_TMUX=2 n "$@"
}

# add a command to start docker instance
dr() {
    ~/repos/dev-env-ansible/rr.sh use u22 "$@"
}

# add a command to start podman docker instance
pd() {
    ~/repos/dev-env-ansible/rr.sh use poddock "$@"
}

# try to use bat in man
export MANROFFOPT="-c"
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# nvm stuff
export NVM_DIR="$HOME/.nvm"

# asdf dir
export ASDF_DIR="$HOME/repos/asdf"

# function to update plugin
update_zsh_plugins() { (
    if test -d "$ZSH_PLUG_DIR"; then
        cd "$ZSH_PLUG_DIR/plugins" || return
        for d in $(fd -t d -d 1); do
            echo "Git pull $d"
            git -C "$d" pull -q
        done
    fi
) }

# Source some tools that I don't use often
sdev() {
    out="$(type conda)"
    if [[ "$out" == *shell\ function* ]] ; then
        # echodebug "conda is a function already"
        return 0
    fi
    if [[ ! -e "$HOME/miniconda3/bin/conda" ]]; then
        echowarning "Miniconda is not installed. After install, try again"
        return 1
    fi
    # echodebug "Need to source conda"
    # Add conda based on your shell
    thisShell="$(ps --no-headers -o comm -p $$)"
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$("$HOME/miniconda3/bin/conda" "shell.$thisShell" 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
            . "$HOME/miniconda3/etc/profile.d/conda.sh"
        else
            export PATH="$HOME/miniconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<
}

# Need an easier way to handle the pass
mpass() {
    # check if the pass exist
    if ! type -p pass &>/dev/null; then
        echo 'Cannot find pass in the PATH' >&2
        return 0
    fi

    # check nargs
    case "$#" in
    0)
        pass
        return 0
        ;;
    1)
        pass "$1" | tr -d '\r\n' | toclip
        return 0
        ;;
    *)
        pass "$@"
        return 0
        ;;
    esac
}

# work around the sudo
if ! type -p doas &>/dev/null; then
    alias doas=sudo
fi

# Add the fcitx support
if command -v fcitx >/dev/null 2>&1; then
    export GTK_IM_MODULE=fcitx
    export QT_IM_MODULE=fcitx
    export XMODIFIERS=@im=fcitx
    export GLFW_IM_MODULE='ibus kitty'
fi

# start ssh-agent manually
export SSH_AUTH_SOCK="~/.local/state/ssh-agent-for-jerry/agent.terminal"
init_ssh_agent() {
    sockdir="${SSH_AUTH_SOCK%/*}"
    mkdir -p "$sockdir"
    if [[ ! -r "$SSH_AUTH_SOCK" ]]; then
        eval "$(ssh-agent -a "$SSH_AUTH_SOCK")"
    fi
}
# init_ssh_agent

export_myvnc_display() {
    # Try to find the display
    displaystart=false
    while IFS='' read -r li; do
        # Print info
        if [[ "$displaystart" == 'true' ]]; then
            # Processing
            if [[ "$li" =~ ^(:[0-9]+) ]]; then
                [[ -n $BASH_VERSION ]] && reMatch=( "${BASH_REMATCH[@]}" )
                [[ -n $ZSH_VERSION ]]  && reMatch=( "$MATCH" "${match[@]}" )
                # Only do this if I have a result
                if [[ -n "${reMatch[1]}" ]]; then
                    # export it and stop
                    export DISPLAY="${reMatch[1]}"
                    break
                fi
            fi
            # stop parsing
            if [[ "$li" =~ ^\ *$ ]]; then
                break
            fi
        fi
        # find display start
        if [[ "$li" =~ ^X\ DISPLAY\ # ]]; then
            displaystart=true
            continue
        fi
    done < <(myvnc)
}

# Need to manage runtime of sophos
sophos() {
    # Need to check if it is installed
    if [[ ! -x "/opt/sophos-spl/plugins/av/bin/avscanner" ]]; then
        echo "Sophos is not installed" >&2
        exit 1
    fi
    action='status'
    # Action is 1st argument if provided
    if [[ "$#" -gt 0 ]]; then
        action="$1"
    fi
    # Do something about it
    case "$action" in
    'start')
        doas systemctl start sophos-spl
        ;;
    'restart')
        doas systemctl restart sophos-spl
        ;;
    'status')
        doas systemctl status sophos-spl
        ;;
    'stop')
        doas systemctl stop sophos-spl
        ;;
    'log')
        cat <<'EOF' | doas bash -l
        # find /opt/sophos-spl/plugins/av/log/ -type f -name 'Sophos*log*' | sort -n -t . -k 3 -r | tr '\n' '\0' | xargs -0 cat | nvim -
        find /opt/sophos-spl/plugins/av/log/ -type f -name 'av*log*' | sort -n -t . -k 3 -r | tr '\n' '\0' | xargs -0 cat | nvim -
EOF
        ;;
    *)
        echo "ERR: Action '$action' is not supported" >&2
        exit 1
        ;;
    esac
}

# turn bracket-paste mode on/off
: <<'EOF'
en ; nvim "./personal-topic/2023-04-01-Terminal.md" -c "/^## Terminal cannot paste password correctly into the sudo password prompt due to the bracket-paste mode enabled/"
EOF
bpm() {
    # Turn it on via
    printf "\e[?2004h"
}
nobpm() {
    # Turn it off via
    printf "\e[?2004l"
}

# never run these
_init_gpg_pass() {

    # Need these
    if [ -z "$MY_GPG_DIR" ]; then
        echo 'MY_GPG_DIR not found'
    fi
    if [ -z "$MY_PASS_ID" ]; then
        echo 'MY_PASS_ID not found'
    fi
    if [ -z "$PASSWORD_STORE_DIR" ]; then
        echo 'MY_PASS_ID not found'
    fi

    echoerror "Code should never get here"
    return 1

    # Check if the key is there
    if gpg --list-keys | grep -q "$MY_PASS_ID"; then
        return 0
    fi

    # Check if the files are there
    if [ ! -r "$MY_GPG_DIR/p.txt" ] || [ ! -r "$MY_GPG_DIR/s.txt" ]; then
        echoerror "Cannot find the key to import from '$MY_GPG_DIR'"
        return 1
    fi

    # Improt the key
    gpg --import "$MY_GPG_DIR/p.txt"
    gpg --import "$MY_GPG_DIR/s.txt"

    # Validate the keys
    gpg --list-keys
    gpg --list-secret-keys

    # trust the key before it can be used an another computer
    gpg --edit-key "$MY_PASS_ID"  # Then enter "trust"

    # Generate a key
    # gpg --quick-generate-key "$MY_PASS_ID"
    gpg --expert --full-generate-key

    # Backup key
    if [ -d "$MY_GPG_DIR" ]; then
        echoerror "Please map the folder '$MY_GPG_DIR'"
        return 1
    fi

    # Export the keys
    gpg --export --output "$MY_GPG_DIR/p.txt" --armor "$MY_PASS_ID"
    # Check the file exist
    if [[ ! -r "$MY_GPG_DIR/p.txt" ]]; then
        echoerror 'Fail to export the p key'
        return 1
    fi
    gpg --export-secret-keys --output "$MY_GPG_DIR/s.txt" --armor "$MY_PASS_ID"
    if [[ ! -r "$MY_GPG_DIR/s.txt" ]]; then
        echoerror 'Fail to export the s key'
        return 1
    fi

    # Init the store
    pass init "$MY_PASS_ID"

    # Add a key
    pass insert --echo somepassword
}
