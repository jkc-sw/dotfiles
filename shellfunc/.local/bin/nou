#!/usr/bin/env bash

:<<'EOF'
SOURCE_THESE_VIMS_START
let @h="yoecho \"\<c-r>\" = \$\<c-r>\"\"\<esc>j"
let @t="yoecho \"\<c-r>\" = \${\<c-r>\"[*]}\"\<esc>j"
echom 'Sourced'
SOURCE_THESE_VIMS_END
EOF

displayHelp() {
    echo "nou - Delegate command to nix in my repo"
    echo ''
    echo "nou run [options... --] <installable> <args>..."
    echo "nou shell [options... --] <installable>..."
    echo "nou -h|--help|help"
    echo ""
    echo "Where"
    echo "  run will map to"
    echo '    nix run "~/repos/jerry-nixos#<installable>" -- <args>...'
    echo '    nix run <options> "~/repos/jerry-nixos#<installable>" -- <args>...'
    echo "  shell will map to"
    echo '    nix shell "~/repos/jerry-nixos#<installable>" "~/repos/jerry-nixos#<installable>" ...'
    echo '    nix shell <options> "~/repos/jerry-nixos#<installable>" "~/repos/jerry-nixos#<installable>" ...'
    echo ""
    echo "Options:"
    echo "  -h|--help|help: to see this help"
}


REPO_PATH="$(realpath ~/repos/jerry-nixos)"

main() {
    local subcmd="$1"
    shift

    if ! validate_repo_exist; then
        return "$?"
    fi

    local args=("$@")

    case "$subcmd" in
    'run')
        sub_cmd_run "${args[@]}"
        return "$?"
        ;;
    'shell')
        sub_cmd_shell "${args[@]}"
        return "$?"
        ;;
    '-h'|'--help'|'help')
        displayHelp
        return 0
        ;;
    *)
        echo "ERR: unsupported cmd '$subcmd', check nou -h" >&2
        return 1
    esac
}

validate_repo_exist() {
    if [[ ! -d "$REPO_PATH" ]]; then
        echo "ERR: '$REPO_PATH' cannot be found. Please checkout repo first" >&2
        return 1
    fi
    return 0
}

sub_cmd_run() {
    local args=("$@")
    local nixArgs=()
    local otherArgs=()
    # separate between nix args and other args
    local argInd=0
    local argLen=${#args[@]}
    while [[ $argInd -lt $argLen ]]; do
        # use a case statement to iterate each command
        local temp="${args[$argInd]}"
        case "${args[$argInd]}" in
        '--')
            nixArgs=("${otherArgs[@]}")
            otherArgs=()
            ;;
        *)
            # store local port number
            otherArgs+=("${args[$argInd]}")
            ;;
        esac
        # increment index
        argInd=$((argInd + 1))
    done

    local pkg="${otherArgs[0]}"
    local pkgArgs=("${otherArgs[@]:1}")
    local runArgs=('run')
    if [[ "${#nixArgs[@]}" -gt 0 ]]; then
        runArgs+=("${nixArgs[@]}")
    fi
    runArgs+=("${REPO_PATH}#$pkg")
    if [[ "${#pkgArgs[@]}" -gt 0 ]]; then
        runArgs+=('--')
        runArgs+=("${pkgArgs[@]}")
    fi
    nix "${runArgs[@]}"
}

sub_cmd_shell() {
    local args=("$@")
    local nixArgs=()
    local otherArgs=()
    # separate between nix args and other args
    local argInd=0
    local argLen=${#args[@]}
    while [[ $argInd -lt $argLen ]]; do
        # use a case statement to iterate each command
        case "${args[$argInd]}" in
        '--')
            nixArgs=("${otherArgs[@]}")
            otherArgs=()
            ;;
        *)
            # store local port number
            otherArgs+=("${args[$argInd]}")
            ;;
        esac
        # increment index
        argInd=$((argInd + 1))
    done

    local runArgs=('shell')
    if [[ "${#nixArgs[@]}" -gt 0 ]]; then
        runArgs+=("${nixArgs[@]}")
    fi
    for pkg in "${otherArgs[@]}"; do
        runArgs+=("${REPO_PATH}#$pkg")
    done
    nix "${runArgs[@]}"
}

main "$@"
