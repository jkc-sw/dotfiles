#!/usr/bin/env bash

#===============================================================================
# @brief Print help
#===============================================================================
displayHelp() {
    cat <<EOF >&2
Start VNC Server for Headless Server

Dependencies:
  - vncserver
  - startup file in ~/.vnc/xstartup
  - xfce4

Installation:
  Copy this file to \$HOME/.local/bin folder

Usages:
  Check the current running session
  $ myvnc

  Start a server with default param, 1920x1080 with 24 depth
  $ myvnc -r

  Create a server with other size and depth
  $ myvnc -r -s 1920x1080 -d 24

  Create a server with another desktop environment
  $ TVNC_WM=gnome myvnc -r -s 1920x1080 -d 24

  Kill a running server at a specific port, :1, then, where first : is omitted
  $ myvnc -k 1

  See help
  $ myvnc -h

Options:
  -s <width>x<height> : The screen resolution. [default is 1920x1080]
  -d <depth>          : Depth of color. [default is 24]
  -k <:port>          : The port to kill. [Default is :1]
EOF
}


#===============================================================================
# @brief Print help
#===============================================================================
main() {
    # Default options
    local depth=24
    local res=1920x1080
    local killport=:1
    local dokill=false
    local new=false
    export TVNC_WM="${TVNC_WM:=xfce}"

    # check dependencies
    if ! command -v vncserver >/dev/null 2>&1; then
        echo 'vncserver needs to be in the path' >&2
        exit 1
    fi

    # Parse the options
    while test "$#" -gt 0; do
        case "$1" in

        '-h' | '--help')
            # send user provided help
            displayHelp
            exit 0
            ;;

        '-r')
            # new server
            new=true
            ;;

        '-s')
            # resolution
            # make sure user has another argument passed in
            if test "$#" -lt 2; then
                echo "ERR: -s needs an argument" >&2
                exit 1
            fi
            # process
            shift
            res="$1"
            ;;

        '-k')
            # what port to kill
            if [[ "$#" -lt 2 ]]; then
                echo "ERR: -s needs an argument" >&2
                exit 1
            fi
            # process
            shift
            killport="$1"
            dokill=true
            ;;

        '-d')
            # Color depth
            # make sure user has another argument passed in
            if test "$#" -lt 2; then
                echo "-n needs an argument" >&2
                exit 1
            fi
            # process
            shift
            depth="$1"
            ;;

        *)
            # Alert invalid command
            echo "Cannot process option $1, see above for usage" >&2
            exit 1
            ;;

        esac

        # next
        shift
    done

    # check it or run it
    if [[ "$new" = 'true' ]]; then
        # run it
        # ( unset SSH_TTY ; vncserver -depth "$depth" -geometry "$res" -xstartup "$HOME/.vnc/xstartup-qtile" )
        ( unset SSH_TTY ; vncserver -depth "$depth" -geometry "$res" )
    elif [[ "$dokill" = 'true' ]]; then

        # Get the current running ones
        while IFS='' read -r li; do
            # verbose print
            echo "$li"
            # Check if anything available to kill
            rgx="$(printf "^(:$killport)\t")"
            if [[ "$li" =~ $rgx ]]; then
                # Format result into array
                [[ -n $BASH_VERSION ]] && reMatch=( MAKE_BASH_1BASE_INDEX "${BASH_REMATCH[@]}" )
                [[ -n $ZSH_VERSION ]]  && reMatch=(                       "$MATCH" "${match[@]}" )
                # If I have the result
                if [[ -n "${reMatch[2]}" ]]; then
                    # kill the display
                    vncserver -kill "${reMatch[2]}"
                    exit "$?"
                fi
            fi
        done < <(vncserver -list | sed '0,/^X DISPLAY/d')
    else
        # check it
        vncserver -list

        # print
        echo ''
        echo "To create new session, check myvnc -h" >&2
    fi
}

# Call main
main "$@"

# vim:et sw=4 sts=4 ts=4
