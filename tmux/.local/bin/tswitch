#!/usr/bin/env bash

# Check if we are in tmux
if test -z "$TMUX"; then
    echo "Need to be run in tmux" >&2
    exit 0
fi

# var
where='-b'
size=33
attach='-d'
cmd=''

# help
displayHelp() {
    echo "$(basename "$0"): Switch/Split tmux pane the way I wanted"
    echo "$(basename "$0") [-r|-l] [-s <percent>]"
    echo ""
    echo "Args"
    echo "  -l           : Make a new split to the left, default behavior"
    echo "  -r           : Make a new split to the right"
    echo "  -s <percent> : The size of the pane in percent 0-100, default $size"
    echo "  -a           : Attach right away, default is not attach"
    echo "  -c <cmd>     : Send additional command to the new window created"
}

# parse args
while getopts ':hlars:c:' opt; do
    case "$opt" in
    a)
        attach=''
        ;;
    r)
        where=''
        ;;
    c)
        cmd="$OPTARG"
        ;;
    l)
        where='-b'
        ;;
    s)
        size="$OPTARG"
        ;;
    h)
        displayHelp
        exit 0
        ;;
    *)
        echo "Unrecognized option $opt" >&2
        displayHelp
        exit 1
        ;;
    esac
done


# Check how many pane the current window has
nws="$(tmux list-panes | wc -l)"

# If is only 1 pane, make a new one
if test "$nws" -eq '1'; then
    tmux split-window -f -h "$where" "$attach" -l "$size%" -c '#{pane_current_path}'

    # if the command is not empty, send the command
    if [[ -n "$cmd" ]]; then
        tmux send-keys -t :.+ "$cmd" Enter
    fi
fi

# # If there are two, we do nothing but switch over
# if test "$nws" -gt '1'; then
#     tmux select-pane -t :.+
#
# else
#     # otherwise, make a new pane to the left and size it properly
#     tmux split-window -f -h "$where" "$attach" -l "$size%" -c '#{pane_current_path}'
# fi

# vim:et ts=4 sts=4 sw=4
